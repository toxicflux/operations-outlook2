with cte as (SELECT  dp.name, k.taskname, dp.afe_cost as total_cost, (k.durestimate/24) as dsv_time, sum(f.planned_total_phase_duration) / count(f.planned_total_phase_duration) as planned_time, (k.duractual/24) as actual_time, (( k.duractual -  sum(f.planned_total_phase_duration) / count(f.planned_total_phase_duration))) as delta_days, dp.afe_cost*count(f.planned_total_phase_duration) / sum(f.planned_total_phase_duration) as pre_vowd, ((sum(f.daily_cost)*count(f.planned_total_phase_duration) / sum(f.planned_total_phase_duration) ) * (k.duractual/24)) - sum(f.daily_cost) as delta_cost, MIN(k.fromdate) as kabal_start, MAX(k.phaseenddate) as kabal_end, (k.durestimate/24) as estimate_time FROM dwh."factcostanalysis" f LEFT JOIN  input."mapping_kabaliqxphases" as mk ON mk.u_phase_id = f.u_phase_id LEFT JOIN dwh.dimkabalphases as k ON k.portplantaskid = mk.portplantaskid LEFT JOIN dwh.dimphases as dp ON dp.u_phase_id = mk.u_phase_id WHERE k.rls_sensitivity <= {{filter.getRlsSensitivity()}} AND f.npd_wellbore = {{ this.params.npd_wellbore || appsmith.URL.queryParams.npd_wellbore || appsmith.store.selectedWellbore }} GROUP BY dp.name, dp.afe_cost, k.taskname, k.duractual, k.durestimate ORDER BY MAX(k.fromdate)),
 cte2 as (
	 SELECT CASE 
    WHEN NOW() :: TIMESTAMP > MIN(c.kabal_start)  AND  NOW() ::TIMESTAMP <= MAX(c.kabal_end)  THEN sum(c.dsv_time)
    ELSE sum(c.actual_time)
  END AS actual_time, sum(c.planned_time)/count(c.planned_time) as planned_time
FROM cte c GROUP BY c.name ORDER BY MAX(kabal_start) 
 )

	SELECT sum(actual_time) as actualDays, sum(planned_time) as plannedDays FROM cte2 WHERE actual_time > 0